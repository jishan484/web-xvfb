#ifndef HTTPPAGE_H
#define HTTPPAGE_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
    int size;
    char *index_html;
} HttpHTMLPage;

HttpHTMLPage htmlPage;

void parseHttpPage(void);
void parseHttpPage(void) {
    // Precalculate HTML content length
    const char *content =
        "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/html; charset=utf-8\r\n"
        "Server: PIwebVNC (by Jishan)\r\n\r\n"
        "<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
"    <title>PiWebVNC client</title>\n"
"</head>\n"
"<style>\n"
"    html,\n"
"    body {\n"
"        height: 100%;\n"
"        padding: 0;\n"
"        margin: 0;\n"
"        border: 0;\n"
"        outline: 0;\n"
"        background: rgb(224, 224, 224);\n"
"        overflow: hidden;\n"
"        user-select: none;\n"
"    }\n"
"\n"
"    /* posion middle of screen */\n"
"    .screen {\n"
"        position: absolute;\n"
"        top: 0;\n"
"        left: calc(50% + 50px);\n"
"        transform: translateX(-50%);\n"
"        width: calc(100% - 100px);\n"
"        height: 100%;\n"
"        overflow-x: scroll;\n"
"        overflow-y: hidden;\n"
"    }\n"
"\n"
"    .screen::-webkit-scrollbar {\n"
"        display: none;\n"
"    }\n"
"\n"
"    .screen {\n"
"        -ms-overflow-style: none;\n"
"        scrollbar-width: none;\n"
"    }\n"
"\n"
"    .sideMenu {\n"
"        position: absolute;\n"
"        top: 0;\n"
"        left: 0;\n"
"        width: 100px;\n"
"        height: 100%;\n"
"        background: rgb(255, 255, 255);\n"
"        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\n"
"    }\n"
"\n"
"    #canvas {\n"
"        position: relative;\n"
"        top: 0;\n"
"        left: 0;\n"
"        max-height: 100%;\n"
"        background: rgb(0, 0, 0);\n"
"    }\n"
"\n"
"    button {\n"
"        position: relative;\n"
"        top: 0;\n"
"        left: 8px;\n"
"        width: 82px;\n"
"        height: 30px;\n"
"        margin-top: 10px;\n"
"        color: rgb(29, 29, 29);\n"
"    }\n"
"\n"
"    .spacer {\n"
"        position: relative;\n"
"        top: 0;\n"
"        left: 0;\n"
"        width: 100%;\n"
"        height: 8%;\n"
"    }\n"
"\n"
"    .status,\n"
"    .dataStatus {\n"
"        position: relative;\n"
"        top: 50px;\n"
"        left: 5px;\n"
"        width: 88px;\n"
"        height: 18px;\n"
"        text-align: center;\n"
"        margin-top: 10px;\n"
"        border: 1px solid #e0e0e0;\n"
"        max-height: 10%;\n"
"        font-size: 13px;\n"
"        color: rgb(37, 37, 37);\n"
"        padding-top: 3px;\n"
"    }\n"
"\n"
"    .dataStatus {\n"
"        left: 5%;\n"
"        width: 90%;\n"
"        height: 35px;\n"
"        background-color: #f1f1f16c;\n"
"        padding-top: 10px;\n"
"        padding-bottom: 5px;\n"
"    }\n"
"\n"
"    @media screen and (max-width: 768px) {\n"
"        .screen {\n"
"            position: relative;\n"
"            top: 0;\n"
"            left: 0;\n"
"            width: 100%;\n"
"            transform: none;\n"
"        }\n"
"\n"
"        .sideMenu {\n"
"            position: relative;\n"
"            width: 100%;\n"
"            height: 40px;\n"
"            top: 0px;\n"
"            left: 0;\n"
"            overflow: hidden;\n"
"        }\n"
"\n"
"        button {\n"
"            margin-top: 4px;\n"
"            float: left;\n"
"        }\n"
"\n"
"        .spacer {\n"
"            display: none;\n"
"        }\n"
"\n"
"        .status,\n"
"        .dataStatus {\n"
"            top: 6px;\n"
"            left: 0px;\n"
"            float: right;\n"
"            max-width: 30%;\n"
"            width: auto;\n"
"            max-height: 40px;\n"
"            margin: 0;\n"
"            height: 20px;\n"
"            padding: 6px 4px 0px;\n"
"            right: 5px;\n"
"        }\n"
"\n"
"        .hide {\n"
"            display: none;\n"
"        }\n"
"    }\n"
"</style>\n"
"\n"
"<body>\n"
"    <div class=\"sideMenu\">\n"
"        <button onclick=\"disconnect()\">Disconnect</button>\n"
"        <button onclick=\"connect()\">Connect</button>\n"
"        <button onclick=\"openFullscreen()\">Full scr</button>\n"
"        <div class=\"spacer\"></div>\n"
"        <div class=\"spacer\"></div>\n"
"        <div class=\"spacer\"></div>\n"
"        <div class=\"spacer\"></div>\n"
"        <div class=\"status\" id=\"statusdiv\">connected</div>\n"
"        <div class=\"status hide\" id=\"lastFrameSize\"></div>\n"
"        <div class=\"dataStatus hide\" id=\"lastTransferedData\"></div>\n"
"        <div class=\"dataStatus\" id=\"totalDataTransfered\"></div>\n"
"    </div>\n"
"    <input type=\"text\" hidden id=\"inputs\" value=\"\">\n"
"    <div class=\"screen\" id=\"screenContainer\">\n"
"        <center><canvas id=\"canvas\"></canvas></center>\n"
"    </div>\n"
"</body>\n"
"<script>\n"
"    const canvas = document.getElementById(\"canvas\");\n"
"    const ctx = canvas.getContext(\"2d\");\n"
"    var config = null;\n"
"    var mouseMoveTimeOut;\n"
"    var mousedownPosition = { state: 0, x: 0, y: 0 };\n"
"    var mouseScrolled = 0;\n"
"    var webSocket = null;\n"
"    var isConnected = false;\n"
"    var serverPixelData = [];\n"
"    var host = \"192.168.0.15\";\n"
"    var port = \"8000\";\n"
"\n"
"    //app internal config variable\n"
"    let doubleKeyPressed = 0;\n"
"    let getPixelRGB = function() { return { r: 0, g: 0, b: 0 }; }\n"
"    let totalDataSize = 0;\n"
"    setTimeout(function(){ connect(); },2000);\n"
"\n"
"    document.addEventListener('paste', handlePaste);\n"
"    const sleep = (milis) => new Promise((resolve => setTimeout(() => resolve(), milis)));\n"
"    async function handlePaste(e) {\n"
"        e.stopPropagation();\n"
"        e.preventDefault();\n"
"        var text = e.clipboardData.getData('text/plain') || window.clipboardData.getData('Text');\n"
"        //console.log(text);\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            //update as soon as possible [make it server side]\n"
"            for (var i = 0; i < text.length; i++) {\n"
"                let key = getXkeyName(text[i]);\n"
"                webSocket.send(\"K1\" + key + \"\\0\");\n"
"                await sleep(80);\n"
"            }\n"
"        }\n"
"    }\n"
"    function updateCanvas(data, serverJPEGData){\n"
"        var relative_x = 0;\n"
"        var relative_y = 0;\n"
"        var relative_width = 0;\n"
"        var relative_height = 0;\n"
"        var bitsPerLine = 0;\n"
"        var transferedDataSize = 0;\n"
"        var index = 3;\n"
"\n"
"        while (data[index] != 32) { relative_x = relative_x * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_y = relative_y * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_width = relative_width * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_height = relative_height * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { bitsPerLine = bitsPerLine * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { transferedDataSize = transferedDataSize * 10 + (data[index] - 48); index++; } index++;\n"
"\n"
"        \n"
"        let reader = new FileReader();\n"
"        reader.onloadend = function() {\n"
"            let img = document.createElement('img');\n"
"            img.onload = function() {\n"
"                ctx.drawImage(img, relative_x, relative_y,relative_width,relative_height);\n"
"            };\n"
"            img.src = reader.result;\n"
"        };\n"
"        reader.readAsDataURL(new Blob([serverJPEGData], { type: 'image/jpeg' }));\n"
"\n"
"        \n"
"        //print last frame size\n"
"        let dataSize = Math.round((transferedDataSize / 1024) * 100) / 100;\n"
"        totalDataSize += (dataSize / 1024);\n"
"        lastFrameSize.innerText = relative_width + \"x\" + relative_height;\n"
"        lastTransferedData.innerHTML = \"Last transferred \" + dataSize + \"KB\";\n"
"        totalDataTransfered.innerHTML = \"Total transferred \" + totalDataSize.toFixed(2) + \"MB\";\n"
"        totalDataTransfered.style.backgroundColor=\"#92ff92cf\";\n"
"    }\n"
"    function drawCanvas(data) {\n"
"        var relative_x = 0;\n"
"        var relative_y = 0;\n"
"        var relative_width = 0;\n"
"        var relative_height = 0;\n"
"        var bitsPerLine = 0;\n"
"        var transferedDataSize = 0;\n"
"        var index = 3;\n"
"\n"
"        while (data[index] != 32) { relative_x = relative_x * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_y = relative_y * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_width = relative_width * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_height = relative_height * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { bitsPerLine = bitsPerLine * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { transferedDataSize = transferedDataSize * 10 + (data[index] - 48); index++; } index++;\n"
"\n"
"        let pixels = ctx.getImageData(relative_x, relative_y, relative_width, relative_height);\n"
"        let k = 0;\n"
"        for (var y = 0; y < relative_height; y++) {\n"
"            for (var x = 0; x < relative_width; x++) {\n"
"                var pixelRGB = getPixelRGB(x, y, 0, bitsPerLine);\n"
"                pixels.data[k++] = pixelRGB.r;\n"
"                pixels.data[k++] = pixelRGB.g;\n"
"                pixels.data[k++] = pixelRGB.b;\n"
"                pixels.data[k++] = 255;\n"
"            }\n"
"        }\n"
"        ctx.putImageData(pixels, relative_x, relative_y);\n"
"\n"
"        //print last frame size\n"
"        let dataSize = Math.round((transferedDataSize / 1024) * 100) / 100;\n"
"        totalDataSize += (dataSize / 1024);\n"
"        lastFrameSize.innerText = relative_width + \"x\" + relative_height;\n"
"        lastTransferedData.innerHTML = \"Last transferred \" + dataSize + \"KB\";\n"
"        totalDataTransfered.innerHTML = \"Total transferred \" + totalDataSize.toFixed(2) + \"MB\";\n"
"        totalDataTransfered.style.backgroundColor=\"white\";\n"
"    }\n"
"\n"
"    function connect() {\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            //console.log(\"already connected\")\n"
"            return;\n"
"        }\n"
"        statusdiv.innerText = \"connecting...\";\n"
"        let ws = new WebSocket((location.protocol === 'https:' ? 'wss' : 'ws') + '://' + location.host);\n"
"        webSocket = ws;\n"
"        ws.onerror = function (evt) {\n"
"            //console.log(\"WebSocket Error: \", e);\n"
"            statusdiv.innerText = \"Errored\";\n"
"        }\n"
"        ws.onclose = function (e) {\n"
"            //console.log(\"WebSocket disconnected: \", e);\n"
"            statusdiv.innerText = \"Disconnected\";\n"
"        }\n"
"        ws.onopen = function() {\n"
"            statusdiv.innerText = \"Connected\";\n"
"            canvas.onmousedown = function (e) {\n"
"                e.preventDefault();\n"
"                mousedownPosition.x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                mousedownPosition.y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                return false;\n"
"            }\n"
"            canvas.onmouseup = function (e) {\n"
"                e.preventDefault();\n"
"                if (mousedownPosition.state == 1) { mousedownPosition.state = 0; return false; }\n"
"                var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                if (Math.abs(mousedownPosition.x - x) > 1 || Math.abs(mousedownPosition.y - y) > 1) {\n"
"                    canvas.style.cursor = \"grabbing\";\n"
"                    data = \"D\" + mousedownPosition.x + \" \" + mousedownPosition.y + \" \" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                } else {\n"
"                    canvas.style.cursor = \"default\";\n"
"                    data = \"C\" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                }\n"
"                return false;\n"
"            }\n"
"            canvas.oncontextmenu = function (e) {\n"
"                e.preventDefault();\n"
"                mousedownPosition.state = 1;\n"
"                var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                data = \"R\" + x + \" \" + y + \" \";\n"
"                ws.send(data);\n"
"                return false;\n"
"            };\n"
"            canvas.onmousemove = function(e) {\n"
"                clearTimeout(mouseMoveTimeOut);\n"
"                mouseMoveTimeOut = setTimeout(function(){\n"
"                    var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                    var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                    data = \"M\" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                }, 100);\n"
"            }\n"
"            canvas.onwheel = function(e){\n"
"                e.preventDefault();\n"
"                mouseScrolled+= e.deltaY;\n"
"                if(mouseScrolled > 50){\n"
"                    mouseScrolled = 0;\n"
"                    console.log(\"scroll up\");\n"
"                    ws.send(\"SD\");\n"
"                }\n"
"                if(mouseScrolled < -50){\n"
"                    mouseScrolled = 0;\n"
"                    console.log(\"scroll down\");\n"
"                    ws.send(\"SU\");\n"
"                }\n"
"                return false;\n"
"            }\n"
"            document.onkeydown = function(e) {\n"
"                if (e.ctrlKey && e.keyCode != 17) {\n"
"                    if (e.shiftKey && e.keyCode == 86) { doubleKeyPressed = 3; return; }\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeyName(\"Control\");\n"
"                    let key2 = getXkeyName(e.key);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else if (e.shiftKey && e.keyCode != 16) {\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeyName(\"Shift\");\n"
"                    let key2 = getXkeyName(e.key);\n"
"                    //console.log(key1 + \" \" + key2);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else if (e.altKey && e.keyCode != 18) {\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeyName(\"Alt\");\n"
"                    let key2 = getXkeyName(e.key);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else {\n"
"                    e.preventDefault();\n"
"                }\n"
"            }\n"
"            document.onkeyup = function(e) {\n"
"                e.preventDefault();\n"
"                if (doubleKeyPressed) {\n"
"                    doubleKeyPressed--;\n"
"                    return;\n"
"                }\n"
"                let key = getXkeyName(e.key);\n"
"                ws.send(\"K1\" + key + \"\\0\");\n"
"            }\n"
"            ws.onmessage = function (event) {\n"
"                if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {\n"
"                    event.data.arrayBuffer().then(function(d){\n"
"                        let resp = new Uint8Array(d);\n"
"                        let header = [];\n"
"                        let i = 0;\n"
"                        while (resp[i] != 10) {\n"
"                            header[i] = resp[i];\n"
"                            i++;\n"
"                        }\n"
"                        \n"
"                        if(resp[0] == 85){\n"
"                            let pixelData = resp.slice(i + 1);                          \n"
"                            drawCanvas(header);\n"
"                        } else if(resp[0] == 86) {\n"
"                            updateCanvas(header, resp.slice(i + 1));\n"
"                        }\n"
"                    });\n"
"                }\n"
"                else {\n"
"                    let data = event.data.toString()\n"
"                    data = data.replace(/'/ig, '\"');\n"
"                    data = JSON.parse(data);\n"
"                    config = data;\n"
"                    configCanvas();\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    function disconnect() {\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            webSocket.close();\n"
"            statusdiv.innerText = \"Disconnected\";\n"
"            //console.log(statusdiv.innerText);\n"
"        }\n"
"    }\n"
"\n"
"    function configCanvas() {\n"
"        canvas.width = config.width;\n"
"        canvas.height = config.height;\n"
"        //get relative width of canvas\n"
"        var relative_width = canvas.width * canvas.height / screenContainer.offsetWidth;\n"
"        if (relative_width > screenContainer.offsetWidth) canvas.style.width = (screenContainer.offsetWidth) + \"px\";\n"
"        else canvas.style.height = (screenContainer.offsetHeight) + \"px\";\n"
"        //ctx.scale(config.width, config.height);\n"
"        ctx.fillStyle = \"rgb(255,255,255)\";\n"
"        ctx.fillRect(0, 0, canvas.width, canvas.height);\n"
"    }\n"
"    window.onresize = function () {\n"
"        canvas.style.width = \"auto\"; canvas.style.height = \"auto\";\n"
"        var relative_width = canvas.width * canvas.height / screenContainer.offsetWidth;\n"
"        if (relative_width > screenContainer.offsetWidth) canvas.style.width = (screenContainer.offsetWidth) + \"px\";\n"
"        else canvas.style.height = (screenContainer.offsetHeight) + \"px\";\n"
"    }\n"
"    function openFullscreen() {\n"
"        if (canvas.requestFullscreen) {\n"
"            canvas.requestFullscreen();\n"
"        } else if (canvas.webkitRequestFullscreen) { /* Safari */\n"
"            canvas.webkitRequestFullscreen();\n"
"        } else if (canvas.msRequestFullscreen) { /* IE11 */\n"
"            canvas.msRequestFullscreen();\n"
"        }\n"
"    }\n"
"    function getXkeyName(key) {\n"
"        switch (key) {\n"
"            case \"ArrowUp\":\n"
"                return \"Up\";\n"
"            case \"ArrowDown\":\n"
"                return \"Down\";\n"
"            case \"ArrowLeft\":\n"
"                return \"Left\";\n"
"            case \"ArrowRight\":\n"
"                return \"Right\";\n"
"            case \"Enter\":\n"
"                return \"Return\";\n"
"            case \"Escape\":\n"
"                return \"Escape\";\n"
"            case \"Backspace\":\n"
"                return \"BackSpace\";\n"
"            case \"Tab\":\n"
"                return \"Tab\";\n"
"            case \"Control\":\n"
"                return \"Control_L\";\n"
"            case \"Shift\":\n"
"                return \"Shift_L\";\n"
"            case \"Alt\":\n"
"                return \"Alt_L\";\n"
"            case \"Meta\":\n"
"                return \"Meta_L\";\n"
"            case \"CapsLock\":\n"
"                return \"Caps_Lock\";\n"
"            case \"F1\":\n"
"                return \"F1\";\n"
"            case \"F2\":\n"
"                return \"F2\";\n"
"            case \"F3\":\n"
"                return \"F3\";\n"
"            case \"F4\":\n"
"                return \"F4\";\n"
"            case \"F5\":\n"
"                return \"F5\";\n"
"            case \"F6\":\n"
"                return \"F6\";\n"
"            case \"F7\":\n"
"                return \"F7\";\n"
"            case \"F8\":\n"
"                return \"F8\";\n"
"            case \"F9\":\n"
"                return \"F9\";\n"
"            case \"F10\":\n"
"                return \"F10\";\n"
"            case \"F11\":\n"
"                return \"F11\";\n"
"            case \"F12\":\n"
"                return \"F12\";\n"
"            case \"Delete\":\n"
"                return \"Delete\";\n"
"            case \"Home\":\n"
"                return \"Home\";\n"
"            case \"End\":\n"
"                return \"End\";\n"
"            case \"PageUp\":\n"
"                return \"Prior\";\n"
"            case \"PageDown\":\n"
"                return \"Next\";\n"
"            case \"PrintScreen\":\n"
"                return \"Print\";\n"
"            case \"ScrollLock\":\n"
"                return \"Scroll_Lock\";\n"
"            case \"Pause\":\n"
"                return \"Pause\";\n"
"            case \"Insert\":\n"
"                return \"Insert\";\n"
"            case \"NumLock\":\n"
"                return \"Num_Lock\";\n"
"            case \"Equal\":\n"
"                return \"equal\";\n"
"            case \" \":\n"
"                return \"space\";\n"
"            case \"-\":\n"
"                return \"minus\";\n"
"            case \"=\":\n"
"                return \"equal\";\n"
"            case \"[\":\n"
"                return \"bracketleft\";\n"
"            case \"]\":\n"
"                return \"bracketright\";\n"
"            case \"\\\\\":\n"
"                return \"backslash\";\n"
"            case \";\":\n"
"                return \"semicolon\";\n"
"            case \"'\":\n"
"                return \"apostrophe\";\n"
"            case \",\":\n"
"                return \"comma\";\n"
"            case \".\":\n"
"                return \"period\";\n"
"            case \"/\":\n"
"                return \"slash\";\n"
"            case \"`\":\n"
"                return \"grave\";\n"
"            case \"~\":\n"
"                return \"asciitilde\";\n"
"            case \"!\":\n"
"                return \"exclam\";\n"
"            case \"@\":\n"
"                return \"at\";\n"
"            case \"#\":\n"
"                return \"numbersign\";\n"
"            case \"$\":\n"
"                return \"dollar\";\n"
"            case \"%\":\n"
"                return \"percent\";\n"
"            case \"^\":\n"
"                return \"asciicircum\";\n"
"            case \"&\":\n"
"                return \"ampersand\";\n"
"            case \"*\":\n"
"                return \"asterisk\";\n"
"            case \"(\":\n"
"                return \"parenleft\";\n"
"            case \")\":\n"
"                return \"parenright\";\n"
"            case \"_\":\n"
"                return \"underscore\";\n"
"            case \"+\":\n"
"                return \"plus\";\n"
"            case \"|\":\n"
"                return \"bar\";\n"
"            case \"}\":\n"
"                return \"braceright\";\n"
"            case \"{\":\n"
"                return \"braceleft\";\n"
"            case \":\":\n"
"                return \"colon\";\n"
"            case '\"':\n"
"                return \"quotedbl\";\n"
"            case \"<\":\n"
"                return \"comma\";\n"
"            case \">\":\n"
"                return \"greater\";\n"
"            case \"?\":\n"
"                return \"question\";\n"
"            default:\n"
"                return key;\n"
"        }\n"
"    }\n"
"</script>\n"
"\n"
"</html>";

    // allocate and copy
    htmlPage.size = (int)strlen(content);
    htmlPage.index_html = (char *)malloc(htmlPage.size + 1);
    if (htmlPage.index_html != NULL) {
        strcpy(htmlPage.index_html, content);
    }
}

#endif
