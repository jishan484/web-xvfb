#ifndef HTTPPAGE_H
#define HTTPPAGE_H

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
    int size;
    char *index_html;
} HttpHTMLPage;

HttpHTMLPage htmlPage;

void parseHttpPage(void);
void parseHttpPage(void) {
    // Precalculate HTML content length
    const char *content =
        "HTTP/1.1 200 OK\r\n"
        "Content-Type: text/html; charset=utf-8\r\n"
        "Server: PIwebVNC (by Jishan)\r\n\r\n"
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\">\n"
"    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
"    <title>üñ•Ô∏è ‚Ö©WebVNC</title>\n"
"    <style>\n"
"        body {\n"
"            margin: 0;\n"
"            height: 100%;\n"
"            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n"
"            background: #e1e1e1ff;\n"
"            color: #7e72c8;\n"
"            overflow: hidden;\n"
"            user-select: none;\n"
"        }\n"
"\n"
"        .sideMenu {\n"
"            position: absolute;\n"
"            top: 0;\n"
"            left: 0;\n"
"            width: 110px;\n"
"            height: 100%;\n"
"            background: #fdfdfd;\n"
"            box-shadow: 2px 0 8px rgba(0,0,0,0.1);\n"
"            display: flex;\n"
"            flex-direction: column;\n"
"            align-items: stretch;\n"
"            padding: 16px 10px 10px 8px;\n"
"            box-sizing: border-box;\n"
"            border-right: 1px solid #c0c0ff;\n"
"        }\n"
"\n"
"        .sideMenu button {\n"
"            width: 100%;\n"
"            padding: 10px;\n"
"            margin: 6px 0;\n"
"            font-size: 13px;\n"
"            border: 1px solid #887dc8ff;\n"
"            border-radius: 6px;\n"
"            background: #e9ecef;\n"
"            color: #7e72c8;\n"
"            text-shadow: 0 0 #b4b1d1ff;\n"
"            cursor: pointer;\n"
"            transition: all 0.2s ease;\n"
"            display: flex;\n"
"            align-items: center;\n"
"            justify-content: flex-start;\n"
"            box-shadow: 2px 3px 7px;\n"
"        }\n"
"\n"
"        .sideMenu button span {\n"
"            display: inline-block;\n"
"            width: 10px;\n"
"            text-align: center;\n"
"            margin-right: 10px;\n"
"            font-size: 15px;\n"
"        }\n"
"        .sideMenu button:hover {\n"
"            background: #dce0e4ff;\n"
"        }\n"
"        .sideMenu button:active {\n"
"            background: #d7dce0ff;\n"
"        }\n"
"\n"
"        .statusGroup {\n"
"            margin-top: auto;\n"
"            width: 88%;\n"
"        }\n"
"\n"
"        .statusLabel {\n"
"            font-size: 11px;\n"
"            font-weight: bold;\n"
"            margin: 8px 0 2px;\n"
"            color: #7e72c8;\n"
"        }\n"
"\n"
"        .status, .dataStatus {\n"
"            width: 98%;\n"
"            padding: 6px;\n"
"            font-size: 12px;\n"
"            text-align: center;\n"
"            border-radius: 6px;\n"
"            background: #f1f3f5;\n"
"            border: 1px solid #dee2e6;\n"
"            margin-bottom: 6px;\n"
"            overflow: hidden;\n"
"            text-overflow: ellipsis;\n"
"            white-space: nowrap;\n"
"        }\n"
"\n"
"        .status.connected { background: #d3f9d8; color: #2b8a3e; border-color: #b2f2bb; }\n"
"        .status.connecting { background: #d3dbf9; color: #2b388a; border-color: #b2b5f2; }\n"
"        .status.disconnected { background: #ffe3e3; color: #c92a2a; border-color: #ffa8a8; }\n"
"\n"
"        .screen {\n"
"            position: absolute;\n"
"            top: 0;\n"
"            left: 110px;\n"
"            width: calc(100% - 110px);\n"
"            height: 100%;\n"
"            display: flex;\n"
"            justify-content: center;\n"
"            align-items: center;\n"
"            background: #e4e4e4ff;\n"
"            overflow: auto;\n"
"        }\n"
"        .screen canvas {\n"
"            max-width: 100%;\n"
"            max-height: 100%;\n"
"            border-radius: 8px;\n"
"            background: #111;\n"
"        }\n"
"\n"
"        @media (max-width: 768px) {\n"
"            .sideMenu {\n"
"                flex-direction: row;\n"
"                width: 100%;\n"
"                height: 60px;\n"
"                box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n"
"                justify-content: space-around;\n"
"                padding: 8px;\n"
"            }\n"
"            .sideMenu button {\n"
"                flex: 1;\n"
"                margin: 0 4px;\n"
"                height: 36px;\n"
"                justify-content: center;\n"
"            }\n"
"            .statusGroup {\n"
"                display: none;\n"
"            }\n"
"            .screen {\n"
"                left: 0;\n"
"                top: 60px;\n"
"                width: 100%;\n"
"                height: calc(100% - 60px);\n"
"            }\n"
"        }\n"
"    </style>\n"
"</head>\n"
"<body>\n"
"    <div class=\"sideMenu\">\n"
"        <button onclick=\"disconnect()\"><span>‚ñ£</span> Stop</button>\n"
"        <button onclick=\"connect()\"><span>‚áã</span> Connect</button>\n"
"        <button onclick=\"openFullscreen()\"><span>‚õ∂</span> Full Scr</button>\n"
"\n"
"        <div class=\"statusGroup\">\n"
"            <div class=\"statusLabel\">Connection</div>\n"
"            <div class=\"status connecting\" id=\"statusdiv\">Connecting</div>\n"
"\n"
"            <div class=\"statusLabel\">Total Data</div>\n"
"            <div class=\"dataStatus\" id=\"totalDataTransfered\">0 MB</div>\n"
"\n"
"            <div class=\"statusLabel\">FPS</div>\n"
"            <div class=\"dataStatus\" id=\"currentFPS\">0</div>\n"
"\n"
"            <div class=\"statusLabel\">Last Frame</div>\n"
"            <div class=\"dataStatus\" id=\"lastFrameSize\">0x0</div>\n"
"\n"
"            <div class=\"statusLabel\">Last Data</div>\n"
"            <div class=\"dataStatus\" id=\"lastTransferedData\">0 KB</div>\n"
"        </div>\n"
"    </div>\n"
"\n"
"    <div class=\"screen\" id=\"screenContainer\">\n"
"        <canvas id=\"canvas\"></canvas>\n"
"    </div>\n"
"</body>\n"
"<script>\n"
"    const canvas = document.getElementById(\"canvas\");\n"
"    const ctx = canvas.getContext(\"2d\");\n"
"    var config = null;\n"
"    var mouseMoveTimeOut;\n"
"    var mousedownPosition = { state: 0, x: 0, y: 0 };\n"
"    var mouseScrolled = 0;\n"
"    var webSocket = null;\n"
"    var isConnected = false;\n"
"    var serverPixelData = [];\n"
"    var host = \"192.168.0.15\";\n"
"    var port = \"8000\";\n"
"    var fps_count = 0;"
"\n"
"    //app internal config variable\n"
"    let doubleKeyPressed = 0;\n"
"    let getPixelRGB = function() { return { r: 0, g: 0, b: 0 }; }\n"
"    let totalDataSize = 0;\n"
"    setTimeout(function(){ connect(); },2000);\n"
"\n"
"    document.addEventListener('paste', handlePaste);\n"
"    const sleep = (milis) => new Promise((resolve => setTimeout(() => resolve(), milis)));\n"
"    async function handlePaste(e) {\n"
"        e.stopPropagation();\n"
"        e.preventDefault();\n"
"        var text = e.clipboardData.getData('text/plain') || window.clipboardData.getData('Text');\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            //update as soon as possible [make it server side]\n"
"            for (var i = 0; i < text.length; i++) {\n"
"                let key = getXkeySym(text[i]);\n"
"                webSocket.send(\"K1\" + key + \"\\0\");\n"
"                await sleep(80);\n"
"            }\n"
"        }\n"
"    }\n"
"    function updateCanvas(data, serverJPEGData){\n"
"        var relative_x = 0;\n"
"        var relative_y = 0;\n"
"        var relative_width = 0;\n"
"        var relative_height = 0;\n"
"        var bitsPerLine = 0;\n"
"        var transferedDataSize = 0;\n"
"        var index = 3;\n"
"        fps_count++;"
"\n"
"        while (data[index] != 32) { relative_x = relative_x * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_y = relative_y * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_width = relative_width * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_height = relative_height * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { bitsPerLine = bitsPerLine * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { transferedDataSize = transferedDataSize * 10 + (data[index] - 48); index++; } index++;\n"
"\n"
"        \n"
"        let reader = new FileReader();\n"
"        reader.onloadend = function() {\n"
"            let img = document.createElement('img');\n"
"            img.onload = function() {\n"
"                ctx.drawImage(img, relative_x, relative_y,relative_width,relative_height);\n"
"            };\n"
"            img.src = reader.result;\n"
"        };\n"
"        reader.readAsDataURL(new Blob([serverJPEGData], { type: 'image/jpeg' }));\n"
"\n"
"        \n"
"        //print last frame size\n"
"        let dataSize = Math.round((transferedDataSize / 1024) * 100) / 100;\n"
"        totalDataSize += (dataSize / 1024);\n"
"        lastFrameSize.innerText = relative_width + \"x\" + relative_height;\n"
"        lastTransferedData.innerHTML = dataSize + \"KB\";\n"
"        totalDataTransfered.innerHTML = totalDataSize.toFixed(2) + \"MB\";\n"
"    }\n"
"    function drawCanvas(data) {\n"
"        var relative_x = 0;\n"
"        var relative_y = 0;\n"
"        var relative_width = 0;\n"
"        var relative_height = 0;\n"
"        var bitsPerLine = 0;\n"
"        var transferedDataSize = 0;\n"
"        var index = 3;\n"
"\n"
"        while (data[index] != 32) { relative_x = relative_x * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_y = relative_y * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_width = relative_width * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { relative_height = relative_height * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { bitsPerLine = bitsPerLine * 10 + (data[index] - 48); index++; } index++;\n"
"        while (data[index] != 32) { transferedDataSize = transferedDataSize * 10 + (data[index] - 48); index++; } index++;\n"
"\n"
"        let pixels = ctx.getImageData(relative_x, relative_y, relative_width, relative_height);\n"
"        let k = 0;\n"
"        for (var y = 0; y < relative_height; y++) {\n"
"            for (var x = 0; x < relative_width; x++) {\n"
"                var pixelRGB = getPixelRGB(x, y, 0, bitsPerLine);\n"
"                pixels.data[k++] = pixelRGB.r;\n"
"                pixels.data[k++] = pixelRGB.g;\n"
"                pixels.data[k++] = pixelRGB.b;\n"
"                pixels.data[k++] = 255;\n"
"            }\n"
"        }\n"
"        ctx.putImageData(pixels, relative_x, relative_y);\n"
"\n"
"        //print last frame size\n"
"        let dataSize = Math.round((transferedDataSize / 1024) * 100) / 100;\n"
"        totalDataSize += (dataSize / 1024);\n"
"        lastFrameSize.innerText = relative_width + \"x\" + relative_height;\n"
"        lastTransferedData.innerHTML = \"Last transferred \" + dataSize + \"KB\";\n"
"        totalDataTransfered.innerHTML = \"Total transferred \" + totalDataSize.toFixed(2) + \"MB\";\n"
"        totalDataTransfered.style.backgroundColor=\"white\";\n"
"    }\n"
"\n"
"    function connect() {\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            return;\n"
"        }\n"
"        statusdiv.innerText = \"Initiated\";\n"
"        let ws = new WebSocket((location.protocol === 'https:' ? 'wss' : 'ws') + '://' + location.host);\n"
"        webSocket = ws;\n"
"        ws.onerror = function (evt) {\n"
"            statusdiv.innerText = \"Errored\";\n"
"            statusdiv.className = 'status disconnected'\n"
"        }\n"
"        ws.onclose = function (e) {\n"
"            statusdiv.innerText = \"Disconnected\";\n"
"            statusdiv.className = 'status disconnected'\n"
"        }\n"
"        ws.onopen = function() {\n"
"            statusdiv.innerText = \"Connected\";\n"
"            statusdiv.className = 'status connected';\n"
"            canvas.onmousedown = function (e) {\n"
"                e.preventDefault();\n"
"                mousedownPosition.x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                mousedownPosition.y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                return false;\n"
"            }\n"
"            canvas.onmouseup = function (e) {\n"
"                e.preventDefault();\n"
"                if (mousedownPosition.state == 1) { mousedownPosition.state = 0; return false; }\n"
"                var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                if (Math.abs(mousedownPosition.x - x) > 1 || Math.abs(mousedownPosition.y - y) > 1) {\n"
"                    canvas.style.cursor = \"grabbing\";\n"
"                    data = \"D\" + mousedownPosition.x + \" \" + mousedownPosition.y + \" \" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                } else {\n"
"                    canvas.style.cursor = \"default\";\n"
"                    data = \"C\" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                }\n"
"                return false;\n"
"            }\n"
"            canvas.oncontextmenu = function (e) {\n"
"                e.preventDefault();\n"
"                mousedownPosition.state = 1;\n"
"                var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                data = \"R\" + x + \" \" + y + \" \";\n"
"                ws.send(data);\n"
"                return false;\n"
"            };\n"
"            canvas.onmousemove = function(e) {\n"
"                clearTimeout(mouseMoveTimeOut);\n"
"                mouseMoveTimeOut = setTimeout(function(){\n"
"                    var x = Math.floor(e.offsetX / canvas.offsetWidth * canvas.width)\n"
"                    var y = Math.floor(e.offsetY / canvas.offsetHeight * canvas.height)\n"
"                    data = \"M\" + x + \" \" + y + \" \";\n"
"                    ws.send(data);\n"
"                }, 100);\n"
"            }\n"
"            canvas.onwheel = function(e){\n"
"                e.preventDefault();\n"
"                mouseScrolled+= e.deltaY;\n"
"                if(mouseScrolled > 50){\n"
"                    mouseScrolled = 0;\n"
"                    ws.send(\"SD\");\n"
"                }\n"
"                if(mouseScrolled < -50){\n"
"                    mouseScrolled = 0;\n"
"                    ws.send(\"SU\");\n"
"                }\n"
"                return false;\n"
"            }\n"
"            document.onkeydown = function(e) {\n"
"                if (e.ctrlKey && e.keyCode != 17) {\n"
"                    if (e.shiftKey && e.keyCode == 86) { doubleKeyPressed = 3; return; }\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeySym(\"Control\");\n"
"                    let key2 = getXkeySym(e.key);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else if (e.shiftKey && e.keyCode != 16) {\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeySym(\"Shift\");\n"
"                    let key2 = getXkeySym(e.key);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else if (e.altKey && e.keyCode != 18) {\n"
"                    e.preventDefault();\n"
"                    let key1 = getXkeySym(\"Alt\");\n"
"                    let key2 = getXkeySym(e.key);\n"
"                    ws.send(\"K2\" + key1 + \" \" + key2 + \"\\0\");\n"
"                    doubleKeyPressed = 2;\n"
"                }\n"
"                else {\n"
"                    e.preventDefault();\n"
"                }\n"
"            }\n"
"            document.onkeyup = function(e) {\n"
"                e.preventDefault();\n"
"                if (doubleKeyPressed) {\n"
"                    doubleKeyPressed--;\n"
"                    return;\n"
"                }\n"
"                let key = getXkeySym(e.key);\n"
"                ws.send(\"K1\" + key + \"\\0\");\n"
"            }\n"
"            ws.onmessage = function (event) {\n"
"                if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {\n"
"                    event.data.arrayBuffer().then(function(d){\n"
"                        let resp = new Uint8Array(d);\n"
"                        let header = [];\n"
"                        let i = 0;\n"
"                        while (resp[i] != 10) {\n"
"                            header[i] = resp[i];\n"
"                            i++;\n"
"                        }\n"
"                        \n"
"                        if(resp[0] == 85){\n"
"                            let pixelData = resp.slice(i + 1);                          \n"
"                            drawCanvas(header);\n"
"                        } else if(resp[0] == 86) {\n"
"                            updateCanvas(header, resp.slice(i + 1));\n"
"                        }\n"
"                    });\n"
"                }\n"
"                else {\n"
"                    let data = event.data.toString()\n"
"                    data = data.replace(/'/ig, '\"');\n"
"                    data = JSON.parse(data);\n"
"                    config = data;\n"
"                    configCanvas();\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    function disconnect() {\n"
"        if (webSocket != null && webSocket.readyState == 1) {\n"
"            webSocket.close();\n"
"            statusdiv.innerText = \"Disconnected\";\n"
"        }\n"
"    }\n"
"\n"
"setInterval(()=>{currentFPS.innerHTML=fps_count;fps_count=0;}, 1000);\n"
"\n"
"    function configCanvas() {\n"
"        canvas.width = config.width;\n"
"        canvas.height = config.height;\n"
"        //get relative width of canvas\n"
"        var relative_width = canvas.width * canvas.height / screenContainer.offsetWidth;\n"
"        if (relative_width > screenContainer.offsetWidth) canvas.style.width = (screenContainer.offsetWidth) + \"px\";\n"
"        else canvas.style.height = (screenContainer.offsetHeight) + \"px\";\n"
"        //ctx.scale(config.width, config.height);\n"
"        ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\n"
"        ctx.fillRect(0, 0, canvas.width, canvas.height);\n"
"    }\n"
"    window.onresize = function () {\n"
"        canvas.style.width = \"auto\"; canvas.style.height = \"auto\";\n"
"        var relative_width = canvas.width * canvas.height / screenContainer.offsetWidth;\n"
"        if (relative_width > screenContainer.offsetWidth) canvas.style.width = (screenContainer.offsetWidth) + \"px\";\n"
"        else canvas.style.height = (screenContainer.offsetHeight) + \"px\";\n"
"    }\n"
"    function openFullscreen() {\n"
"        if (canvas.requestFullscreen) {\n"
"            canvas.requestFullscreen();\n"
"        } else if (canvas.webkitRequestFullscreen) { /* Safari */\n"
"            canvas.webkitRequestFullscreen();\n"
"        } else if (canvas.msRequestFullscreen) { /* IE11 */\n"
"            canvas.msRequestFullscreen();\n"
"        }\n"
"    }\n"
"    canvas.onfullscreenchange = ()=>{\n"
"         if(canvas.style.borderRadius == '0px')\n"
"            canvas.style.borderRadius = '10px'; else canvas.style.borderRadius = '0px';\n"
"}\n\n"
"    function getXkeyName(key) {\n"
"        switch (key) {\n"
"            case \"ArrowUp\":\n"
"                return \"Up\";\n"
"            case \"ArrowDown\":\n"
"                return \"Down\";\n"
"            case \"ArrowLeft\":\n"
"                return \"Left\";\n"
"            case \"ArrowRight\":\n"
"                return \"Right\";\n"
"            case \"Enter\":\n"
"                return \"Return\";\n"
"            case \"Escape\":\n"
"                return \"Escape\";\n"
"            case \"Backspace\":\n"
"                return \"BackSpace\";\n"
"            case \"Tab\":\n"
"                return \"Tab\";\n"
"            case \"Control\":\n"
"                return \"Control_L\";\n"
"            case \"Shift\":\n"
"                return \"Shift_L\";\n"
"            case \"Alt\":\n"
"                return \"Alt_L\";\n"
"            case \"Meta\":\n"
"                return \"Meta_L\";\n"
"            case \"CapsLock\":\n"
"                return \"Caps_Lock\";\n"
"            case \"F1\":\n"
"                return \"F1\";\n"
"            case \"F2\":\n"
"                return \"F2\";\n"
"            case \"F3\":\n"
"                return \"F3\";\n"
"            case \"F4\":\n"
"                return \"F4\";\n"
"            case \"F5\":\n"
"                return \"F5\";\n"
"            case \"F6\":\n"
"                return \"F6\";\n"
"            case \"F7\":\n"
"                return \"F7\";\n"
"            case \"F8\":\n"
"                return \"F8\";\n"
"            case \"F9\":\n"
"                return \"F9\";\n"
"            case \"F10\":\n"
"                return \"F10\";\n"
"            case \"F11\":\n"
"                return \"F11\";\n"
"            case \"F12\":\n"
"                return \"F12\";\n"
"            case \"Delete\":\n"
"                return \"Delete\";\n"
"            case \"Home\":\n"
"                return \"Home\";\n"
"            case \"End\":\n"
"                return \"End\";\n"
"            case \"PageUp\":\n"
"                return \"Prior\";\n"
"            case \"PageDown\":\n"
"                return \"Next\";\n"
"            case \"PrintScreen\":\n"
"                return \"Print\";\n"
"            case \"ScrollLock\":\n"
"                return \"Scroll_Lock\";\n"
"            case \"Pause\":\n"
"                return \"Pause\";\n"
"            case \"Insert\":\n"
"                return \"Insert\";\n"
"            case \"NumLock\":\n"
"                return \"Num_Lock\";\n"
"            case \"Equal\":\n"
"                return \"equal\";\n"
"            case \" \":\n"
"                return \"space\";\n"
"            case \"-\":\n"
"                return \"minus\";\n"
"            case \"=\":\n"
"                return \"equal\";\n"
"            case \"[\":\n"
"                return \"bracketleft\";\n"
"            case \"]\":\n"
"                return \"bracketright\";\n"
"            case \"\\\\\":\n"
"                return \"backslash\";\n"
"            case \";\":\n"
"                return \"semicolon\";\n"
"            case \"'\":\n"
"                return \"apostrophe\";\n"
"            case \",\":\n"
"                return \"comma\";\n"
"            case \".\":\n"
"                return \"period\";\n"
"            case \"/\":\n"
"                return \"slash\";\n"
"            case \"`\":\n"
"                return \"grave\";\n"
"            case \"~\":\n"
"                return \"asciitilde\";\n"
"            case \"!\":\n"
"                return \"exclam\";\n"
"            case \"@\":\n"
"                return \"at\";\n"
"            case \"#\":\n"
"                return \"numbersign\";\n"
"            case \"$\":\n"
"                return \"dollar\";\n"
"            case \"%\":\n"
"                return \"percent\";\n"
"            case \"^\":\n"
"                return \"asciicircum\";\n"
"            case \"&\":\n"
"                return \"ampersand\";\n"
"            case \"*\":\n"
"                return \"asterisk\";\n"
"            case \"(\":\n"
"                return \"parenleft\";\n"
"            case \")\":\n"
"                return \"parenright\";\n"
"            case \"_\":\n"
"                return \"underscore\";\n"
"            case \"+\":\n"
"                return \"plus\";\n"
"            case \"|\":\n"
"                return \"bar\";\n"
"            case \"}\":\n"
"                return \"braceright\";\n"
"            case \"{\":\n"
"                return \"braceleft\";\n"
"            case \":\":\n"
"                return \"colon\";\n"
"            case '\"':\n"
"                return \"quotedbl\";\n"
"            case \"<\":\n"
"                return \"comma\";\n"
"            case \">\":\n"
"                return \"greater\";\n"
"            case \"?\":\n"
"                return \"question\";\n"
"            default:\n"
"                return key;\n"
"        }\n"
"    }\n"
"	function getXkeySym(key) {\n"
"	    const specialMap = {\n"
"	        \"ArrowUp\":      0xFF52, // XK_Up\n"
"	        \"ArrowDown\":    0xFF54, // XK_Down\n"
"	        \"ArrowLeft\":    0xFF51, // XK_Left\n"
"	        \"ArrowRight\":   0xFF53, // XK_Right\n"
"	        \"Enter\":        0xFF0D, // XK_Return\n"
"	        \"Escape\":       0xFF1B, // XK_Escape\n"
"	        \"Backspace\":    0xFF08, // XK_BackSpace\n"
"	        \"Tab\":          0xFF09, // XK_Tab\n"
"	        \"Control\":      0xFFE3, // XK_Control_L\n"
"	        \"Shift\":        0xFFE1, // XK_Shift_L\n"
"	        \"Alt\":          0xFFE9, // XK_Alt_L\n"
"	        \"Meta\":         0xFFE7, // XK_Meta_L\n"
"	        \"CapsLock\":     0xFFE5, // XK_Caps_Lock\n"
"	        \"F1\":           0xFFBE,\n"
"	        \"F2\":           0xFFBF,\n"
"	        \"F3\":           0xFFC0,\n"
"	        \"F4\":           0xFFC1,\n"
"	        \"F5\":           0xFFC2,\n"
"	        \"F6\":           0xFFC3,\n"
"	        \"F7\":           0xFFC4,\n"
"	        \"F8\":           0xFFC5,\n"
"	        \"F9\":           0xFFC6,\n"
"	        \"F10\":          0xFFC7,\n"
"	        \"F11\":          0xFFC8,\n"
"	        \"F12\":          0xFFC9,\n"
"	        \"Delete\":       0xFFFF, // XK_Delete\n"
"	        \"Home\":         0xFF50,\n"
"	        \"End\":          0xFF57,\n"
"	        \"PageUp\":       0xFF55, // XK_Prior\n"
"	        \"PageDown\":     0xFF56, // XK_Next\n"
"	        \"PrintScreen\":  0xFF61, // XK_Print\n"
"	        \"ScrollLock\":   0xFF14,\n"
"	        \"Pause\":        0xFF13,\n"
"	        \"Insert\":       0xFF63,\n"
"	        \"NumLock\":      0xFF7F\n"
"	    };\n"
"	    if (specialMap.hasOwnProperty(key)) {\n"
"	        return specialMap[key];\n"
"	    }\n"
"	    if (typeof key === \"string\" && key.length === 1) {\n"
"	        return key.charCodeAt(0);\n"
"	    }\n"
"	    return null;\n"
"	}\n"
"</script>\n"
"\n"
"</html>";

    // allocate and copy
    htmlPage.size = (int)strlen(content);
    htmlPage.index_html = (char *)malloc(htmlPage.size + 1);
    if (htmlPage.index_html != NULL) {
        strcpy(htmlPage.index_html, content);
    }
}

#endif
